
/* BeginOAWidget_Instance_2141544: #dd_menu */
/* Settable values for skinning a Basic menu via presets. If presets are not sufficient, most skinning should be done in
	these rules, with the exception of the images used for down or right pointing arrows, which are in the file SpryMenuBasic.css
	
	 These assume the following widget classes for menu layout (set in a preset)
	.MenuBar - Applies to all menubars - default is horizontal bar, all submenus are vertical - 2nd level subs and beyond are pull-right.
	.MenuBarVertical - vertical main bar; all submenus are pull-right.
	
	You can also pass in extra classnames to set your desired top level menu bar layout. Normally, these are set by using a preset. 
	They only apply to horizontal menu bars:
		MenuBarLeftShrink - The menu bar will be horizontally 'shrinkwrapped' to be just large enough to hold its items, and left aligned
		MenuBarRightShrink - Just like MenuBarLeftShrink, but right aligned
		MenuBarFixedLeft - Fixed at a specified width set in the rule '.MenuBarFixedLeft', and left aligned.  
		MenuBarFixedCentered -  - Fixed at a specified width set in the rule '.MenuBarFixedCentered', 
						and centered in its parent container.
		MenuBarFullwidth - Grows to fill its parent container width.
 
	In general, all rules specified in this file are prefixed by #dd_menu so they only apply to instances of the widget inserted along
	with the rules. This permits use of multiple MenuBarBasic widgets on the same page with different layouts. Because of IE6 limitations,
	there are a few rules where this was not possible. Those rules are so noted in comments.
	
*/

#dd_menu {
	background-color:transparent;
	font-family: Verdana, Geneva, sans-serif; /* Specify fonts on on MenuBar and subMenu MenuItemContainer, so MenuItemContainer,
												MenuItem, and MenuItemLabel
												at a given level all use same definition for ems.
												Note that this means the size is also inherited to child submenus, 
												so use caution in using relative sizes other than
												100% on submenu fonts. */
	font-weight: normal;
	font-size: 11px;
	font-style: normal;
	padding:0;
	border-color: #ffffff #ffffff #ffffff #ffffff;
	border-width:0px;
	border-style: none none none none;
}
/* Caution: because ID+class selectors do not work properly in IE6, but we want to restrict these rules to just this
widget instance, we have used string-concatenated classnames for our selectors for the layout type of the menubar 
in this section. These have very low specificity, so be careful not to accidentally override them. */

.MenuBar br { /* using just a class so it has same specificity as the ".dd_menuFixedCentered br" rule bleow */
	display:none;
}
.dd_menuLeftShrink {
	float: left; /* shrink to content, as well as float the MenuBar */
	width: auto;
}
.dd_menuRightShrink {
	float: right; /* shrink to content, as well as float the MenuBar */
	width: auto;
}
.dd_menuFixedLeft {
	float: left;
	width: 170px;
}
.dd_menuFixedCentered {
	float: none;
	width: 170px;
	margin-left:auto;
	margin-right:auto;
}
.dd_menuFixedCentered br {
	clear:both;
	display:block;
}
.dd_menuFixedCentered .SubMenu br {
	display:none;
}
.dd_menuFullwidth {
	float: left;
	width: 100%;
}
/* Top level menubar items - these actually apply to all items, and get overridden for 1st or successive level submenus */
#dd_menu .MenuItemContainer {
	padding: 0px 0px 0px 0px;
	margin: 0; 	/* Zero out margin  on the item containers. The MenuItem is the active hover area.
				For most items, we have to do top or bottom padding or borders only on the MenuItem 
				or a child so we keep the entire submenu tiled with items.
				Setting this to 0 avoids "dead spots" for hovering. */
}
#dd_menu .MenuItem {
	padding: 0px 0px 0px 0px;
	background-color:transparent;
	border-width:0px;
	border-color: #cccccc #ffffff #cccccc #ffffff;
	border-style: none solid none solid;
}
#dd_menu .MenuItemFirst {
	border-style: none none none none;
}
#dd_menu .MenuItemLast {
	border-style: none solid none none;
}
#dd_menu .MenuItem .MenuItemLabel {
	text-align:left;
	line-height:1.4em;
	color:#202020;
	background-color:transparent;
	padding: 3px 0px 3px 25px;
	width: 170px;
	cursor: pointer;
}
.SpryIsIE6 #dd_menu .MenuItem .MenuItemLabel {
	width:1em; /* Equivalent to min-width in modern browsers */
}
/* First level submenu items */
#dd_menu .SubMenu .MenuItem {
	font-family: Verdana, Geneva, sans-serif;
	font-weight: normal;
	font-size: 11px;
	font-style: normal;
	background-color:#e9e9e9;
	padding:0px 2px 0px 0px;
	border-width:0px;
	border-color: #cccccc #cccccc #cccccc #cccccc;
	/* Border styles are overriden by first and last items */
	border-style: solid solid none solid;
	cursor: pointer;
}
#dd_menu .SubMenu .MenuItemFirst {
	border-style: solid solid none solid;
}
#dd_menu .SubMenu .MenuItemFirst .MenuItemLabel {
	padding-top: 0px;
}
#dd_menu .SubMenu .MenuItemLast {
	border-style: solid solid solid solid;
}
#dd_menu .SubMenu .MenuItemLast .MenuItemLabel {
	padding-bottom: 0px;
}
#dd_menu .SubMenu .MenuItem .MenuItemLabel {
	text-align:left;
	line-height:1em;
	background-color:#e9e9e9;
	color:#202020;
	padding: 5px 0px 5px 19px;
	width: 165px;
}
/* Hover states for containers, items and labels */
#dd_menu .MenuItemHover {
	background-color: #b00312;
	border-color: #cccccc #cccccc #cccccc #cccccc;
}
#dd_menu .MenuItemWithSubMenu.MenuItemHover .MenuItemLabel {
	background-color: #b00312; /* consider exposing this prop separately*/
	color: #FFF;
}
#dd_menu .MenuItemHover .MenuItemLabel {
	background-color: #b00312;
	color: #FFF;
}
#dd_menu .SubMenu .MenuItemHover {
	background-color: #b00312;
	border-color: #cccccc #cccccc #cccccc #cccccc;
}
#dd_menu .SubMenu .MenuItemHover .MenuItemLabel {
	background-color: #b00312;
	color: #FFF;
}
/* Submenu properties -- First level of submenus */
#dd_menu .SubMenuVisible {
	background-color: #e9e9e9;
	min-width:0%;  /* This keeps the menu from being skinnier than the parent MenuItemContainer - nice to have but not available on ie6 */
	border-color: #ffffff #ffffff #ffffff #ffffff;
	border-width:0px;
	border-style: none none none none;
}
#dd_menu.MenuBar .SubMenuVisible {/* For Horizontal menubar only */
	top: 100%;	/* 100% is at the bottom of parent menuItemContainer */
	left:0px; /* 'left' may need tuning depending upon borders or padding applied to menubar MenuItemContainer or MenuItem, 
					and your personal taste.
					0px will left align the dropdown with the content area of the MenuItemContainer. Assuming you keep the margins 0 
					on MenuItemContainer and MenuItem on the parent
					menubar, making this equal the sum of the MenuItemContainer & MenuItem padding-left will align 
					the dropdown with the left of the menu item label.*/
	z-index:10;
}
#dd_menu.MenuBarVertical .SubMenuVisible {
	top: 0px;
	left:100%;
	min-width:0px; /* Do not neeed to match width to parent MenuItemContainer - items will prevent total collapse */
}
/* Submenu properties -- Second level submenu and beyond - these are visible descendents of .MenuLevel1 */
#dd_menu .MenuLevel1 .SubMenuVisible {
	background-color: #e9e9e9;
	min-width:0px; /* Do not neeed to match width to parent MenuItemContainer - items will prevent total collapse*/
	top: 0px;	/* If desired, you can move this down a smidge to separate top item''s submenu from menubar - 
				that is really only needed for submenu on first item of MenuLevel1, or you can make it negative to make submenu more
				vertically 'centered' on its invoking item */
	left:100%; /* If you want to shift the submenu left to partially cover its invoking item, you can add a margin-left with a 
				negative value to this rule. Alternatively, if you use fixed-width items, you can change this left value
				to use px or ems to get the offset you want. */
}
/* IE6 rules - you can delete these if you do not want to support IE6 */

/* A note about multiple classes in IE6.
 * Some of the rules above use multiple class names on an element for selection, such as "hover" (MenuItemHover) and "has a subMenu" (MenuItemWithSubMenu),
 * giving the selector '.MenuItemWithSubMenu.MenuItemHover'.
 * Unfortunately IE6 does not support using mutiple classnames in a selector for an element. For a selector such as '.foo.bar.baz', IE6 ignores
 * all but the final classname (here, '.baz'), and sets the specificity accordingly, counting just one of those classs as significant. To get around this 
 * problem, we use the plugin in SpryMenuBarIEWorkaroundsPlugin.js to generate compound classnames for IE6, such as 'MenuItemWithSubMenuHover'. 
 * Since there are a lot of these needed, the plugin does not generate the extra classes for modern browsers, and we use the CSS2 style mutltiple class
 * syntax for that. Since IE6 both applies rules where 
 * it should not, and gets the specificity wrong too, we have to order rules carefully, so the rule misapplied in IE6 can be overridden. 
 * So, we put the multiple class rule first. IE6 will mistakenly apply this rule.  We follow this with the single-class rule that it would 
 * mistakenly override, making sure the  misinterpreted IE6 specificity is the same as the single-class selector, so the latter wins. 
 * We then create a copy of the multiple class rule, adding a '.SpryIsIE6' class as context, and making sure the specificity for
 * the selector is high enough to beat the single-class rule in the "both classes match" case. We place the IE6 rule at the end of the 
 * css style block to make it easy to delete if you want to drop IE6 support.
 * If you decide you do not need IE6 support, you can get rid of these, as well as the inclusion of the SpryMenuBarIEWorkaroundsPlugin.js script.
 * The 'SpryIsIE6' class is placed on the HTML element by  the script in SpryMenuBarIEWorkaroundsPlugin.js if the browser is Internet Explorer 6. This avoids the necessity of IE conditional comments for these rules.
 */
.SpryIsIE6 #dd_menu .MenuBarView .MenuItemWithSubMenuHover .MenuItemLabel /* IE6 selector  */ {
	background-color: #b00312; /* consider exposing this prop separately*/
	color: #FFF;
}
.SpryIsIE6 #dd_menu .MenuBarView .SubMenu .MenuItemWithSubMenuHover .MenuItemLabel/* IE6 selector  */ {
	background-color: #b00312; /* consider exposing this prop separately*/
	color: #FFF;
}
.SpryIsIE6 #dd_menu .SubMenu .SubMenu  /* IE6 selector  */ {
	margin-left: -0px; /* Compensates for at least part of an IE6 "double padding" version of the "double margin" bug */
}

	
/* EndOAWidget_Instance_2141544 */